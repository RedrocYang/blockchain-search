/**
 * 利用数据集对数据加密上传到区块链
 */
import com.mongodb.client.MongoCollection;
import encrypt.AESUtils;
import org.bson.Document;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.security.Key;
import java.util.Arrays;

public class Insert {

    public static void Main(String[] args) {
        insertDataSet();
    }
    public static void insertDataSet(){

        Realize.mopeTest.setUp();
        AESUtils aesUtils = new AESUtils();//确定性加密
        PROUtils proUtils = new PROUtils();//概率加密
        Realize realize = new Realize();
        Key key = aesUtils.getKey();
        Key key1 = proUtils.getKey();
        String[] arr = new String[0];
        //获取集合
        //int i  =0;
        //连接数据库
        MongoCollection collection = MongoDButil.getCollection("medical","multttest");
        try {
            //获取数据集
            BufferedReader br = new BufferedReader(new FileReader("ClinicianUtilization_2019.txt"));
            String line ;
                while ((line=br.readLine())!=null){
                    i++;
                    if (i == 1){
                    //数据量
                    }else if (i>=2 && i <= 1001){
                        Document document = new Document();//相当于写了一个｛｝
                        Document document1 = new Document();//相当于写了一个｛｝
                        /*String[]*/ arr = line.split(",");

                        String[] s = arr[7].split(" ");


                        //上传区块链(密文)
//                    key确定加密，直接是确定的
                    String kv1 = "26af5f15dbc33efc34e8941cb924f27b:"+aesUtils.encryptData(arr[0], key) + ".PRO";//调用概率加密
                    String kv2 = "6b38c00ca5e034712cb0396a22dca102:"+aesUtils.encryptData(arr[1], key) + ".PRO";
                    String kv3 = "79d12ae3d74d0768a6bb68437a5dc7f8:"+proUtils.encryptData(arr[2], key) + ".DET";//调用确定性加密
                    String kv4 = "c365b0caa4d37b708fa133bf53627848:"+proUtils.encryptData(arr[3], key) + ".DET";
                    String kv5 = "b2753122421b3fdc741374ddaf98c01c:"+proUtils.encryptData(arr[4], key) + ".DET";
                    String kv6 = "prac_st:"+arr[5];
                    String kv7 = "52e43e2690b0578c8ddef13a5d3b0abb:"+aesUtils.encryptData(arr[6], key) + ".DET";
                    String kv8 = "9b0f6d28cfc7999a8d26c90eda5b18e53df2701e527c2250b409398e0da3a880:"+toString(Realize.swpTest.encSearch(s[0]))+".SEARCH";//调用可搜索加密
                    String kv9 = "69c13975430d0748e7a04e5e75714143:"+toString(Realize.mopeTest.encOPE((short) Integer.parseInt(arr[8])))+".OPE";//调用保序加密
                    String kv0 = "e90e64c46b8ca9e90fcc01fcecb85846:"+toString(Realize.mopeTest.encOPE((short) Integer.parseInt(arr[9])))+".OPE";
                    String hash = Sha256.getDigest(kv1+kv2+kv3+kv4+kv5+kv6+kv7+kv8+kv9+kv0);
                    EncExtract.create(kv1,kv2,kv3,kv4,kv5,kv6,kv7,kv8,kv9,kv0,hash);//调用该函数上传到区块链中。
                    }else {
                        System.out.println("结束");
                        break;
                    }

                }
        } catch (Exception e) {
            System.out.println("异常");
            for (String s : arr) {
                System.out.println(s);
            }
            e.printStackTrace();
        }
    }


}
